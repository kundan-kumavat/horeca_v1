generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_ZyHciBK0GWN7@ep-floral-thunder-afanpr8x-pooler.c-2.us-west-2.aws.neon.tech/neondb?sslmode=require&channel_binding=require"
}

//
// ─── ENUMS ───────────────────────────────────────────────
//

enum UserRole {
  MASTER_ADMIN
  BRANCH_ADMIN
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

enum OrderStatus {
  NEW
  REQUESTED
  ACCEPTED
  PAID
  PREPARING
  READY
  COMPLETED
  CANCELLED
  REFUNDED
}

//
// ─── MODELS ──────────────────────────────────────────────
//

model Hotel {
  id            String   @id @default(uuid())
  name          String
  address       String?
  contactEmail  String?
  contactPhone  String?
  masterAdminId String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  masterAdmin User?    @relation("MasterAdmin", fields: [masterAdminId], references: [id])
  branches    Branch[]
}

model Branch {
  id                String   @id @default(uuid())
  name              String
  address           String?
  currency          String   @default("INR")
  timezone          String?
  defaultTaxPercent Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  hotelId    String
  hotel      Hotel      @relation(fields: [hotelId], references: [id])
  adminId    String?    @unique
  admin      User?      @relation("BranchAdmin", fields: [adminId], references: [id])
  tables     Table[]
  categories Category[]
  menuItems  MenuItem[]
  orders     Order[]
  qrcodes    QRCode[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(BRANCH_ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Optional relations (user can be master admin or branch admin)
  hotel  Hotel?  @relation("MasterAdmin")
  branch Branch? @relation("BranchAdmin")
}

model Table {
  id       String      @id @default(uuid())
  branchId String
  branch   Branch      @relation(fields: [branchId], references: [id])
  number   Int
  capacity Int?
  status   TableStatus @default(AVAILABLE)
}

model QRCode {
  id        String   @id @default(uuid())
  branchId  String
  branch    Branch   @relation(fields: [branchId], references: [id])
  tableId   String?
  label     String?
  url       String
  createdAt DateTime @default(now())
}

model Category {
  id        String     @id @default(uuid())
  branchId  String
  branch    Branch     @relation(fields: [branchId], references: [id])
  name      String
  order     Int        @default(0)
  menuItems MenuItem[]
}

model MenuItem {
  id          String    @id @default(uuid())
  branchId    String
  branch      Branch    @relation(fields: [branchId], references: [id])
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  name        String
  description String?
  price       Float
  images      String[]  @default([])
  labels      String[]  @default([])
  prepTime    Int?
  isActive    Boolean   @default(true)
}

model Order {
  id            String      @id @default(uuid())
  branchId      String
  branch        Branch      @relation(fields: [branchId], references: [id])
  tableId       String?
  clientName    String?
  clientPhone   String?
  items         Json
  totalAmount   Float
  taxAmount     Float
  finalAmount   Float
  paymentMethod String
  paymentStatus String      @default("pending")
  status        OrderStatus @default(NEW)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
